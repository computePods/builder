#!/usr/bin/env python

# This Python script sets up a user's ssh to allow restricted rsync
# to/from specific directories.

#########################################################################
# Initial configuration:

# See: https://rsync.samba.org/resources.html
#
rrsyncUrl = "https://download.samba.org/pub/unpacked/rsync/support/rrsync"

# The following two lines are (re)created by the ComputePods build tool
#
cpPublicRsyncTag = "{{ rsync['name'] }}"
cpPublicRsyncKey = "{{ rsync['publicKey'] }}"

#########################################################################

import datetime
import os
import sys
import urllib.request

# Set some computed variables and paths
#
homeDir     = os.path.expanduser('~')
rrsyncCmd   = os.path.join(homeDir, '.ssh', 'rrsync')
rrsyncLog   = rrsyncCmd+'.log'
authKeyPath = os.path.join(homeDir, '.ssh', 'authorized_keys')

# Determine the directory into which all rsync requests will be confined
#
if 1 < len(sys.argv) :
  rrsyncDir = sys.argv[1]
else :
  rrsyncDir = homeDir

# Download and install the the rrsync perl script from the rsync.samba.org
# website. This script is used under the Samba Rsync GPL license.
#
rrsyncStr = None
try :
  # this code based on https://docs.python.org/3/howto/urllib2.html
  with urllib.request.urlopen(rrsyncUrl) as response:
     rrsyncStr = response.read()
     rrsyncStr = rrsyncStr.decode('UTF-8')
     rrsyncStr = rrsyncStr.replace('rrsync.log', f"{rrsyncLog}")
except :
  pass

if rrsyncStr is None :
  print("Could not download the rrsync command from https://rsync.samba.org/resources.html")
  sys.exit(-1)

with open(rrsyncCmd, "w") as cmdFile :
  cmdFile.write(rrsyncStr)
os.chmod(rrsyncCmd, 0o700)

# Make sure the rrsync.log file exists
#
with open(rrsyncLog, "w") as logFile :
  logFile.write("")

# Get the current authorized_keys file contents (as an array of lines)
#
authKeys = None
try :
  with open(authKeyPath, 'r') as authKeyFile :
    authKeys = authKeyFile.readlines()
except :
  pass

if authKeys is None :
  print(f"Could not open the ssh authorized_keys file ({authKeyPath})")
  sys.exit(-1)

# Copy all the non-rrsync keys to a new list of keys
#
newAuthKeys = []
for aKey in authKeys :
  aKey = aKey.strip()
  if not aKey.endswith(cpPublicRsyncTag) :
    newAuthKeys.append(aKey)

# Add the rrsync key to this new list of keys
#
authKeyLine = f"command=\"{rrsyncCmd} {rrsyncDir}\" {cpPublicRsyncKey}"
newAuthKeys.append(authKeyLine)

# Backup the existing authorized_keys file
#
timeNow = datetime.datetime.now().strftime("%Y.%m.%d-%H.%M.%S")
os.rename(authKeyPath, authKeyPath+'_cpBackup_'+timeNow)

# Save the new authorized_keys file
#
with open(authKeyPath, "w") as authKeyFile :
  authKeyFile.write("\n".join(newAuthKeys))
